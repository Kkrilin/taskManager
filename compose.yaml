# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: ${NODE_ENV}
      SERVER_PORT: 3001
      DB_HOST: db
      DB_HOST1: ${DB_HOST1}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_USER1: ${DB_USER1}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PASSWORD1: ${DB_PASSWORD1}
      DB: ${DB}
      DB1: ${DB1}
      DIALECT: ${DIALECT}
      SECRET_KEY: ${SECRET_KEY}
      DB_URL: ${DB_URL}
      DB_URL1: ${DB_URL1}
      DB_URL2: ${DB_URL2}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      SERVER_URL: ${SERVER_URL}
      # SSL: false
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:14
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - ${DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10
volumes:
  postgres-data:

